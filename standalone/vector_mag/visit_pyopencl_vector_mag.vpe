#*****************************************************************************
#
# Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
# Produced at the Lawrence Livermore National Laboratory
# LLNL-CODE-442911
# All rights reserved.
#
# This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
# full copyright notice is contained in the file COPYRIGHT located at the root
# of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
#
# Redistribution  and  use  in  source  and  binary  forms,  with  or  without
# modification, are permitted provided that the following conditions are met:
#
#  - Redistributions of  source code must  retain the above  copyright notice,
#    this list of conditions and the disclaimer below.
#  - Redistributions in binary form must reproduce the above copyright notice,
#    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
#    documentation and/or other materials provided with the distribution.
#  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
#    be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
# ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
# LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
# DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
# SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
# CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
# LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
# OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#*****************************************************************************
#
# VisIt Python Expression
#

import numpy as npy
import pyopencl as cl

# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp
from os.path import join as pjoin

import hotshot
from flow.filters import pyocl_env
from flow.core.common import WallTimer
from visit_flow_vpe import vpe_timing_info

class PyOpenCLVectorMag(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "PyOpenCLVectorMag"
        self.description = "PyOpenCLVectorMag"
        self.output_is_point_var = False
        self.output_dimension = 1
        self.profile = False
    def derive_variable(self,ds_in,domain_id):
        if self.profile:
            prof   = hotshot.Profile("hotshot_vpe_exec")
            prof.start()
        wtot   = WallTimer("derive_variable")
        fsetup = WallTimer("setup_exe")
        tvtk   = WallTimer("vtk_setup")
        fexec  = WallTimer("exe_main")
        wtot.start()
        fsetup.start()
        ksrc = open(pjoin(self.arguments[0],"cl","vector_mag.cl")).read()
        plat = int(self.arguments[1])
        dev  = int(self.arguments[2])
        pyocl_env.Manager.select_device(plat,dev)
        pyocl_env.Manager.clear_events()
        pyocl_env.Pool.reset()
        fsetup.stop()
        tvtk.start()
        ncells  = ds_in.GetNumberOfCells()
        cl_data = ds_in.GetCellData()
        pt_data = ds_in.GetPointData()
        u = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[0]))
        v = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[1]))
        w = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[2]))
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        o = vnp.vtk_to_numpy(res)
        tvtk.stop()
        fexec.start()
        self.__exec_3d(ksrc,u,v,w,o)
        fexec.stop()
        wtot.stop()
        if self.profile:
            prof.close()
        txt, ttag = pyocl_env.Manager.events_summary()
        print txt
        vpe_timing_info(ttag,[fsetup,tvtk, fexec],wtot)
        return res
    def __exec_3d(self,ksrc,u,v,w,out):
        buffers = []
        for ipt in [u,v,w]:
            buf = pyocl_env.Pool.request_buffer(ipt.shape,ipt.dtype)
            buf.write(ipt)
            buffers.append(buf)
        dest_buf = pyocl_env.Pool.request_buffer(out.shape,out.dtype)
        buffers.append(dest_buf)
        pyocl_env.Manager.dispatch_kernel(ksrc,
                                          out.shape,
                                          buffers)
        out[:] = dest_buf.read()


py_filter = PyOpenCLVectorMag