#
# VisIt Python Expression
#

import numpy as npy
import pyopencl as cl
# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp

class PyOpenCLCurl3D(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "PyOpenCLCurl"
        self.description = "PyOpenCLCurl"
        self.output_is_point_var = False
        print len(self.input_var_names)
        self.output_dimension = 3
        self.ctx   = cl.create_some_context()
        self.queue = cl.CommandQueue(self.ctx)
        self.prog  = cl.Program(self.ctx,open("cl/curl_3d.cl").read()).build()
    def derive_variable(self,ds_in,domain_id):
        ncells = ds_in.GetNumberOfCells()
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(3)
        res.SetNumberOfTuples(ncells)
        cl_data = ds_in.GetCellData()
        dfx = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[0]))
        dfy = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[1]))
        dfz = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[2]))
        o   = vnp.vtk_to_numpy(res)
        self.__exec_3d(dfx,dfy,dfz,o)
        return res
    def __exec_3d(self,dfx,dfy,dfz,out):
        print "shapes:"
        print " dfx = %s" % str(dfx.shape)
        print " dfy = %s" % str(dfy.shape)
        print " dfz = %s" % str(dfz.shape)
        print " o  = %s" % str(out.shape)
        mf = cl.mem_flags
        dfx_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=dfx)
        dfy_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=dfy)
        dfz_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=dfz)
        dest_buf = cl.Buffer(self.ctx, mf.WRITE_ONLY, out.nbytes)
        self.prog.exe(self.queue, out.shape, None, dfx_buf, dfy_buf, dfz_buf, dest_buf)
        cl.enqueue_copy(self.queue, out, dest_buf)
 
py_filter = PyOpenCLCurl3D