#
# VisIt Python Expression
#

import numpy as npy
import pyopencl as cl
# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp
from os.path import join as pjoin

class PyOpenCLQCrit(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "PyOpenCLQCrit"
        self.description = "PyOpenCLQCrit"
        self.output_is_point_var = False
        self.output_dimension = 1
        dev_id = mpicom.rank() % 2
        platform = cl.get_platforms()[0]
        device   = platform.get_devices()[dev_id]
        self.ctx = cl.Context([device])
        self.queue = cl.CommandQueue(self.ctx)
        self.prog = None
    def derive_variable(self,ds_in,domain_id):
        if self.prog is None:
            spath = self.arguments[-1]
            spath = pjoin(spath,"cl","q_criterion.cl")
            self.prog  = cl.Program(self.ctx,open(spath).read()).build()
        ncells = ds_in.GetNumberOfCells()
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        cl_data = ds_in.GetCellData()
        pt_data = ds_in.GetPointData()
        dims    = ds_in.GetDimensions()
        x = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[0]))
        y = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[1]))
        z = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[2]))
        u = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[3]))
        v = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[4]))
        w = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[5]))
        o = vnp.vtk_to_numpy(res)
        self.__exec_3d(dims,x,y,z,u,v,w,o)
        return res
    def __exec_3d(self,dims,x,y,z,u,v,w,out):
        #print "shapes:"
        #print " x = %s" % str(x.shape)
        #print " y = %s" % str(y.shape)
        #print " z = %s" % str(z.shape)
        #print " u = %s" % str(u.shape)
        #print " v = %s" % str(v.shape)
        #print " w = %s" % str(w.shape)
        #print " o = %s" % str(out.shape)
        mf = cl.mem_flags
        d = npy.zeros((3,1),dtype=npy.int32)
        d[:,0] = (dims[0],dims[1],dims[2])
        d_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=d)
        x_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=x)
        y_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=y)
        z_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=z)
        u_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=u)
        v_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=v)
        w_buf  = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=w)
        dest_buf = cl.Buffer(self.ctx, mf.WRITE_ONLY, out.nbytes)
        self.prog.q_criterion(self.queue, out.shape, None, d_buf, x_buf,y_buf, z_buf, u_buf,v_buf, w_buf, dest_buf)
        cl.enqueue_copy(self.queue, out, dest_buf)

py_filter = PyOpenCLQCrit
