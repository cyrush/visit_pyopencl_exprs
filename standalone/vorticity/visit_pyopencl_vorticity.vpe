#
# VisIt Python Expression
#

import numpy as npy
import pyopencl as cl

# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp
from os.path import join as pjoin

import hotshot
from flow.filters import pyocl_env
from flow.core.common import WallTimer
from visit_flow_vpe import vpe_timing_info

class PyOpenCLVorticity(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "PyOpenCLVorticity"
        self.description = "PyOpenCLVorticity"
        self.output_is_point_var = False
        self.output_dimension = 1
        self.profile = True
    def derive_variable(self,ds_in,domain_id):
        if self.profile:
            prof   = hotshot.Profile("hotshot_vpe_exec")
            prof.start()
        wtot   = WallTimer("derive_variable")
        fsetup = WallTimer("setup_exe")
        tvtk   = WallTimer("vtk_setup")
        fexec  = WallTimer("exe_main")
        wtot.start()
        fsetup.start()
        ksrc = open(pjoin(self.arguments[0],"cl","vorticity_3d.cl")).read()
        plat = int(self.arguments[1])
        dev  = int(self.arguments[2])
        pyocl_env.Manager.select_device(plat,dev)
        pyocl_env.Manager.clear_events()
        pyocl_env.Pool.reset()
        fsetup.stop()
        tvtk.start()
        ncells = ds_in.GetNumberOfCells()
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        cl_data = ds_in.GetCellData()
        pt_data = ds_in.GetPointData()
        dims    = ds_in.GetDimensions()
        u = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[0]))
        v = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[1]))
        w = vnp.vtk_to_numpy(cl_data.GetArray(self.input_var_names[2]))
        x = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[3]))
        y = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[4]))
        z = vnp.vtk_to_numpy(pt_data.GetArray(self.input_var_names[5]))
        o = vnp.vtk_to_numpy(res)
        tvtk.stop()
        fexec.start()
        self.__exec_3d(ksrc,u,v,w,dims,x,y,z,o)
        fexec.stop()
        wtot.stop()
        if self.profile:
            prof.close()
        txt, ttag = pyocl_env.Manager.events_summary()
        vpe_timing_info(ttag,[fsetup,tvtk, fexec],wtot)
        print txt
        return res
    def __exec_3d(self,ksrc,u,v,w,dims,x,y,z,out):
        d = npy.zeros((3,1),dtype=npy.int32)
        d[:,0] = (dims[0],dims[1],dims[2])
        u_buf = pyocl_env.Pool.request_buffer(u.shape,u.dtype)
        v_buf = pyocl_env.Pool.request_buffer(v.shape,v.dtype)
        w_buf = pyocl_env.Pool.request_buffer(w.shape,w.dtype)
        d_buf = pyocl_env.Pool.request_buffer(d.shape,d.dtype)
        x_buf = pyocl_env.Pool.request_buffer(x.shape,x.dtype)
        y_buf = pyocl_env.Pool.request_buffer(y.shape,y.dtype)
        z_buf = pyocl_env.Pool.request_buffer(z.shape,z.dtype)
        dest_buf = pyocl_env.Pool.request_buffer(out.shape,out.dtype)
        d_buf.write(d)
        u_buf.write(u)
        v_buf.write(v)
        w_buf.write(w)
        x_buf.write(z)
        y_buf.write(y)
        z_buf.write(z)
        buffers = [ u_buf,v_buf,w_buf,
                    d_buf,
                    x_buf,y_buf,z_buf,
                    dest_buf]
        pyocl_env.Manager.dispatch_kernel(ksrc,
                                          out.shape,
                                          buffers)
        out[:] = dest_buf.read()

py_filter = PyOpenCLVorticity