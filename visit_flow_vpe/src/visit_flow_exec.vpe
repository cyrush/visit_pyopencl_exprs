# [VisIt Python Expression]
#
# ${disclaimer}
#
"""
 file: visit_flow_exec.vpe
 author: Cyrus Harrison <cyrush@llnl.gov>
 created:  12/09/2011
 description:
    VisIt Python Expression that executes a flow workspace.

"""

import numpy as npy
# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp

from flow import *
from flow.filters import *

class FlowExecExpr(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "FlowExecExpr"
        self.output_is_point_var = False
        self.output_dimension = 1
    def derive_variable(self,ds_in,domain_id):
        # get workspace
        wstype = self.arguments[0]
        wsexpr = self.arguments[1]
        print "WSTYPE: ", wstype
        print "WSEXPR: ", wsexpr
        if wstype == "src":
            w = Workspace.load_workspace_script(src=self.arguments[1])
        else:
            w = Workspace()
            w.register_filters(module(wstype))
            ctx = w.add_context(wstype,"root")
            ctx.start()
            w.setup_expression_network(wsexpr,ctx)
        # construct output array
        ncells = ds_in.GetNumberOfCells()
        dims = npy.array(ds_in.GetDimensions(),dtype=npy.int32)
        w.registry_add(":dims",dims)
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        out = vnp.vtk_to_numpy(res)
        # get input arrays & bind data into workspace
        for var in self.input_var_names:
            vdata = ds_in.GetCellData().GetArray(var)
            if vdata is None:
                vdata = ds_in.GetPointData().GetArray(var)
            if vdata is None:
                raise Exception("flow_vpe error: could not fetch %s" % var)
            vdata = vnp.vtk_to_numpy(vdata)
            w.registry_add(":" + var,vdata)
        if w.has_context("root"):
            ctx = w.get_context("root")
            if ctx.context_type.count("pyocl")>0:
                ctx.set_device_id(mpicom.rank() % 2)
        # exec filter graph (returns last registry entry obj)
        # print w.execution_plan()
        w.graph.save_dot("last.dot")
        r = w.execute()
        # check the active context to see if
        # are using pyocl_compile
        if w.has_context("root"):
            if ctx.context_type.count("compile") > 0:
                ctx.set_output_shape((ncells,))
                #if mpicom.rank() == 0:
                #    print ctx.compile()
                r = ctx.run()
            elif ctx.context_type.count("batch") > 0:
                r = r.read()
        # set result (results in a numpy data copy)
        out[:] = r
        return res

py_filter = FlowExecExpr