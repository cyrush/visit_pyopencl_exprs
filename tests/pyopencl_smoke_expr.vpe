#
# [VisIt Python Expression]
#
# file: pyopencl_smoke_expr.py
# author: Cyrus Harrison <cyrush@llnl.gov>
#
# A simple VisIt python expression which tests c=a+b pyopencl kernel.
#

import numpy
import pyopencl as cl
# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp

print "numpy module: %s "    % numpy.__file__
print "pyopencl module: %s " % cl.__file__

def execute_kernel(a,b,out):
    """ Execute OpenCL kernel to calc: out = a+b. """
    ctx   = cl.create_some_context()
    queue = cl.CommandQueue(ctx)
    mf = cl.mem_flags
    a_buf    = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=a)
    b_buf    = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=b)
    dest_buf = cl.Buffer(ctx, mf.WRITE_ONLY, b.nbytes)
    prg = cl.Program(ctx, """
        __kernel void sum(__global const float *a,
        __global const float *b, __global float *c)
        {
          int gid = get_global_id(0);
          c[gid] = a[gid] + b[gid];
        }
        """).build()
    prg.sum(queue, a.shape, None, a_buf, b_buf, dest_buf)
    cl.enqueue_copy(queue, out, dest_buf)

class PyOpenCLSmokeExpr(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "PyOpenCLSmokeExpr"
        self.output_is_point_var = False
        self.output_dimension = 1
    def derive_variable(self,ds_in,domain_id):
        # construct output array
        ncells = ds_in.GetNumberOfCells()
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        # get input arrays
        vtk_a = ds_in.GetCellData().GetArray(self.input_var_names[0])
        vtk_b = ds_in.GetCellData().GetArray(self.input_var_names[1])
        # fetch numpy ndarrays that wrap vtk array data
        a   = vnp.vtk_to_numpy(vtk_a)
        b   = vnp.vtk_to_numpy(vtk_b)
        out = vnp.vtk_to_numpy(res)
        # execute the kernel
        execute_kernel(a,b,out)
        return res
 
py_filter = PyOpenCLSmokeExpr