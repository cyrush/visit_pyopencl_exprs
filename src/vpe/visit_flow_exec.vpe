# [VisIt Python Expression]
#
# ${disclaimer}
#
"""
 file: visit_flow_exec.vpe
 author: Cyrus Harrison <cyrush@llnl.gov>
 created:  12/09/2011
 description:
    TODO

"""

import numpy as npy
# used to convert between vtk & numpy
import vtk.util.numpy_support as vnp

import flow.core
from flow.core import *
from flow.filters import npy_ops
import hashlib
import os.path
import imp
import traceback

def load_workspace(fname):
    # NOTE: for parallel we will want to remove this print statement:
    print "[loading workingspace from: %s]" % os.path.abspath(fname)
    res = None
    try:
        try:
            fin = open(fname, 'rb')
            res = imp.load_source(hashlib.md5(fname).hexdigest(), fname, fin)
        finally:
            try: fin.close()
            except: pass
    except ImportError, x:
        traceback.print_exc(file = sys.stderr)
        raise
    except:
        traceback.print_exc(file = sys.stderr)
        raise
    if not res is None:
        w = Workspace()
        # exec file
        res.setup_workspace(w)
        return w;

class FlowExecExpr(SimplePythonExpression):
    def __init__(self):
        SimplePythonExpression.__init__(self)
        self.name = "FlowExecExpr"
        self.output_is_point_var = False
        self.output_dimension = 1
    def derive_variable(self,ds_in,domain_id):
        # get workspace
        w = load_workspace(self.arguments[0])
        # construct output array
        ncells = ds_in.GetNumberOfCells()
        res = vtk.vtkFloatArray()
        res.SetNumberOfComponents(1)
        res.SetNumberOfTuples(ncells)
        out = vnp.vtk_to_numpy(res)
        # get input arrays & bind data into workspace
        for var in self.input_var_names:
            vdata = vnp.vtk_to_numpy(ds_in.GetCellData().GetArray(var))
            w.registry_add(var,vdata)
        # exec filter graph (returns last registry entry obj)
        # set result (results in a numpy data copy)
        out[:] = w.execute()
        return res

py_filter = FlowExecExpr