
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '"\xa3!36\xa0\x99\xc5\x90\xeb\xe8\xee\xf0\xfdM['
    
_lr_action_items = {'%':([2,5,6,7,8,9,17,18,19,20,21,22,23,24,],[-11,-12,11,-12,-9,11,-10,11,-7,11,-5,11,-6,-8,]),')':([2,7,8,9,17,19,20,21,22,23,24,],[-11,-12,-9,17,-10,-7,-3,-5,-4,-6,-8,]),'(':([0,1,4,10,11,12,13,14,15,16,],[4,4,4,4,4,4,4,4,4,4,]),'+':([2,5,6,7,8,9,17,18,19,20,21,22,23,24,],[-11,-12,12,-12,-9,12,-10,12,-7,-3,-5,-4,-6,-8,]),'*':([2,5,6,7,8,9,17,18,19,20,21,22,23,24,],[-11,-12,13,-12,-9,13,-10,13,-7,13,-5,13,-6,-8,]),'-':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[1,1,-11,1,-12,14,-12,-9,14,1,1,1,1,1,1,1,-10,14,-7,-3,-5,-4,-6,-8,]),'NUMBER':([0,1,4,10,11,12,13,14,15,16,],[2,2,2,2,2,2,2,2,2,2,]),'/':([2,5,6,7,8,9,17,18,19,20,21,22,23,24,],[-11,-12,15,-12,-9,15,-10,15,-7,15,-5,15,-6,-8,]),'VAR':([0,1,4,10,11,12,13,14,15,16,],[5,7,7,7,7,7,7,7,7,7,]),'^':([2,5,6,7,8,9,17,18,19,20,21,22,23,24,],[-11,-12,16,-12,-9,16,-10,16,-7,16,-5,16,-6,-8,]),'=':([5,],[10,]),'$end':([2,3,5,6,7,8,17,18,19,20,21,22,23,24,],[-11,0,-12,-2,-12,-9,-10,-1,-7,-3,-5,-4,-6,-8,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,4,10,11,12,13,14,15,16,],[6,8,9,18,19,20,21,22,23,24,]),'statement':([0,],[3,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR = expression','statement',3,'p_statement_assign','visit_exprs.py',81),
  ('statement -> expression','statement',1,'p_statement_expr','visit_exprs.py',85),
  ('expression -> expression + expression','expression',3,'p_expression_binop','visit_exprs.py',89),
  ('expression -> expression - expression','expression',3,'p_expression_binop','visit_exprs.py',90),
  ('expression -> expression * expression','expression',3,'p_expression_binop','visit_exprs.py',91),
  ('expression -> expression / expression','expression',3,'p_expression_binop','visit_exprs.py',92),
  ('expression -> expression % expression','expression',3,'p_expression_binop','visit_exprs.py',93),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','visit_exprs.py',94),
  ('expression -> - expression','expression',2,'p_expression_uminus','visit_exprs.py',104),
  ('expression -> ( expression )','expression',3,'p_expression_group','visit_exprs.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_number','visit_exprs.py',116),
  ('expression -> VAR','expression',1,'p_expression_var','visit_exprs.py',120),
]
